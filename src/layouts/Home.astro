---
const txt = "article"

import { getBlogCount } from "../library/microcms";
import * as styles from 'global.css'
---
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <script type="importmap">
      {
        "imports": {
          "three": "https://unpkg.com/three@0.152.2/build/three.module.js"
        }
      }
    </script>
    <script type="module">
      import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.117.1/build/three.module.js';

      // サイズを指定
      const width = 480;
      const height = 300;

      const maxWidthInCh = 65; //描写の最大幅を合わせる
      const oneChWidth = parseFloat(getComputedStyle(document.documentElement).fontSize);
      const maxWidthInPixels = maxWidthInCh * oneChWidth;
      // ウィンドウの幅と比較して小さい方を採用
      const finalWidth = Math.min(window.innerWidth, maxWidthInPixels);
      const finalHeight = finalWidth * (height / width);


      // マウス座標管理用のベクトルを作成
      const mouse = new THREE.Vector2();

      // canvas 要素の参照を取得する
      const canvas = document.querySelector("#myCanvas");

      // レンダラーを作成
      const renderer = new THREE.WebGLRenderer({
        canvas: canvas,
      });
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(finalWidth, finalHeight);

      // シーンを作成
      const scene = new THREE.Scene();

      // カメラを作成
      const camera = new THREE.PerspectiveCamera(45, width / height);
      camera.position.set(0, 0, +1000);

      const geometry = new THREE.BoxBufferGeometry(50, 50, 50);

      // マウスとの交差を調べたいものは配列に格納する
      // 記事の総数を獲得し、それの数だけキューブを生成する
      const meshList = [];
      for (let i = 0; i < 100; i++) {
        const material = new THREE.MeshStandardMaterial({ color: 0xffffff });

        const mesh = new THREE.Mesh(geometry, material);
        mesh.position.x = (Math.random() - 0.5) * 800;
        mesh.position.y = (Math.random() - 0.5) * 800;
        mesh.position.z = (Math.random() - 0.5) * 800;
        mesh.rotation.x = Math.random() * 2 * Math.PI;
        mesh.rotation.y = Math.random() * 2 * Math.PI;
        mesh.rotation.z = Math.random() * 2 * Math.PI;
        scene.add(mesh);

        // 配列に保存
        meshList.push(mesh);
      }

      // 平行光源
      const directionalLight = new THREE.DirectionalLight(0xffffff);
      directionalLight.position.set(1, 1, 1);
      scene.add(directionalLight);

      // 環境光源
      const ambientLight = new THREE.AmbientLight(0x333333);
      scene.add(ambientLight);

      // レイキャストを作成
      const raycaster = new THREE.Raycaster();

      canvas.addEventListener("mousemove", handleMouseMove);
      tick();

      // マウスを動かしたときのイベント
      function handleMouseMove(event) {
        const element = event.currentTarget;
        // canvas要素上のXY座標
        const x = event.clientX - element.offsetLeft;
        const y = event.clientY - element.offsetTop;
        // canvas要素の幅・高さ
        const w = element.offsetWidth;
        const h = element.offsetHeight;

        // -1〜+1の範囲で現在のマウス座標を登録する
        mouse.x = (x / w) * 2 - 1;
        mouse.y = -(y / h) * 2 + 1;
      }

      // 毎フレーム時に実行されるループイベントです
      function tick() {
        // レイキャスト = マウス位置からまっすぐに伸びる光線ベクトルを生成
        raycaster.setFromCamera(mouse, camera);

        // その光線とぶつかったオブジェクトを得る
        const intersects = raycaster.intersectObjects(meshList);
        
        var object = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({
            color: Math.random() * 0xffffff }));  

        object.userData = { URL: "http://stackoverflow.com"};

        meshList.map((mesh) => {
          // 交差しているオブジェクトが1つ以上存在し、
          // 交差しているオブジェクトの1番目(最前面)のものだったら
          if (intersects.length > 0 && mesh === intersects[0].object) {
            // 色を赤くする
            mesh.material.color.setHex(0xff0000);
            
          } else {
            // それ以外は元の色にする
            mesh.material.color.setHex(0xffffff);
          }
        });

        window.addEventListener('resize', () => {
        // 更新された画面サイズを取得
        const width = window.innerWidth;
        const height = window.innerHeight;

        if(width > 800){
          camera.aspect = width / height;
        camera.updateProjectionMatrix();

        // レンダラーのサイズを更新
        renderer.setSize(width/2, height/2.5);
        }
        // カメラのアスペクト比を更新
        
      });


        // レンダリング
        renderer.render(scene, camera);
        requestAnimationFrame(tick);
      }
    </script>
  </head>
  <body>
    <p class="total"><span>総合記事数 : </span>{{ getBlogCount }}件</p>
    <canvas id="myCanvas"></canvas>
  </body>
</html>
<style>

body {
  font-family: Verdana, sans-serif;
	margin-left: auto;
	margin-right:auto;
	padding: 20px;
	max-width: 65ch;
	text-align: left;
	background-color: #fff;
	word-wrap: break-word;
	overflow-wrap: break-word;
	line-height: 1.5;
	color: #444;
}

</style>
